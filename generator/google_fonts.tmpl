// GENERATED CODE - DO NOT EDIT

// Copyright 2019 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:recase/recase.dart';

import 'src/google_fonts_base.dart';
import 'src/google_fonts_descriptor.dart';
import 'src/google_fonts_variant.dart';

/// A collection of properties used to specify custom behavior of the
/// [GoogleFonts] library.
class _Config {
  /// Whether or not the GoogleFonts library can make requests to
  /// [fonts.google.com](https://fonts.google.com/) to retrieve font files.
  var allowRuntimeFetching = true;
}

/// Provides configuration, and static methods to obtain [Font].
///
/// Retrieve a font by family name with [getFont].
/// The Font has methods to get the [TextStyle] and [TextTheme]
///
/// Check out the [README](https://github.com/material-foundation/google-fonts-flutter/blob/main/README.md) for more info.
class GoogleFonts{
  /// Configuration for the [GoogleFonts] library.
  ///
  /// Use this to define custom behavior of the GoogleFonts library in your app.
  /// For example, if you do not want the GoogleFonts library to make any HTTP
  /// requests for fonts, add the following snippet to your app's `main` method.
  ///
  /// ```dart
  /// GoogleFonts.config.allowRuntimeFetching = false;
  /// ```
  static final config = _Config();

  /// A getter to get all GoogleFont font families
  static List<String> get fontFamilies => fonts.keys.toList();

  /// A method to get a font with [FontFamily]
  ///
  /// Returns instance of [Font] class 
  /// that can be used to load and get a [TextStyle]
  /// or [TextTheme]
  static Font getFont(GoogleFontFamily fontFamily){
    if (!fonts.containsKey(fontFamily.name)) {
      throw Exception("No font family by name '${fontFamily.name}' was found.");
    }
    return fonts[fontFamily.name]!();
  }

  /// A method to get a font dynamically
  ///
  /// Returns instance of [Font] class 
  /// that can be used to load and get a [TextStyle]
  /// or [TextTheme]
  static Font getFontDynamically(String fontFamily){
    final camelCase = fontFamily.camelCase;
    if (!fonts.containsKey(camelCase)) {
      throw Exception("No font family by name '$camelCase' was found.");
    }
    return fonts[camelCase]!();
  }
}

/// Enum where every value is font family from Google Fonts.
enum GoogleFontFamily{
  {{#method}}
  {{fontFamilyCamelCase}},
  {{/method}}
}


/// A map of fonts 
///
/// Returns a map where the key is the Google Font family 
/// and the value is the corresponding class.
@visibleForTesting
const Map<String, Font Function()> fonts = {
  {{#method}}
  '{{fontFamilyCamelCase}}':{{fontFamilyPascalCase}}Font.new,
  {{/method}}
};

/// Base class for fonts
abstract class Font {
  const Font();

  // Getter for the name of the font family
  String get name;

  /// Get a map of all available files.
  ///
  /// Returns a map where the key is the variant and the value
  /// is the corresponding file.
  Map<GoogleFontsVariant, GoogleFontsFile> get files;

  ///Preload a font.
  Future<void> preload({
    TextStyle? textStyle,
    Color? color,
    Color? backgroundColor,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) async{
    textStyle ??= const TextStyle();
    textStyle = textStyle.copyWith(
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
    );

    await loadGoogleFontsFont(
      fontFamily: name,
      textStyle: textStyle,
      files: files,
    );
  }

  /// Applies a font family to the given [textStyle].
  TextStyle style({
    TextStyle? textStyle,
    Color? color,
    Color? backgroundColor,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<ui.Shadow>? shadows,
    List<ui.FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) {
  textStyle ??= const TextStyle();
  textStyle = textStyle.copyWith(
    color: color,
    backgroundColor: backgroundColor,
    fontSize: fontSize,
    fontWeight: fontWeight,
    fontStyle: fontStyle,
    letterSpacing: letterSpacing,
    wordSpacing: wordSpacing,
    textBaseline: textBaseline,
    height: height,
    locale: locale,
    foreground: foreground,
    background: background,
    shadows: shadows,
    fontFeatures: fontFeatures,
    decoration: decoration,
    decorationColor: decorationColor,
    decorationStyle: decorationStyle,
    decorationThickness: decorationThickness,
  );

    return makeGoogleFontsTextStyle(
      fontFamily: name,
      textStyle: textStyle,
      files: files,
    );
  }

  /// Applies a font family to every [TextStyle] in the given [textTheme].
  TextTheme theme([TextTheme? textTheme]){
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      displayLarge: style(textStyle: textTheme.displayLarge),
      displayMedium: style(textStyle: textTheme.displayMedium),
      displaySmall: style(textStyle: textTheme.displaySmall),
      headlineLarge: style(textStyle: textTheme.headlineLarge),
      headlineMedium: style(textStyle: textTheme.headlineMedium),
      headlineSmall: style(textStyle: textTheme.headlineSmall),
      titleLarge: style(textStyle: textTheme.titleLarge),
      titleMedium: style(textStyle: textTheme.titleMedium),
      titleSmall: style(textStyle: textTheme.titleSmall),
      bodyLarge: style(textStyle: textTheme.bodyLarge),
      bodyMedium: style(textStyle: textTheme.bodyMedium),
      bodySmall: style(textStyle: textTheme.bodySmall),
      labelLarge: style(textStyle: textTheme.labelLarge),
      labelMedium: style(textStyle: textTheme.labelMedium),
      labelSmall: style(textStyle: textTheme.labelSmall),
    );
  }
}

{{#method}}
/// Class for {{fontFamilyPascalCase}} font family from Google Fonts
///
/// See:
///  * {{docsUrl}}
class {{fontFamilyPascalCase}}Font extends Font {
  const {{fontFamilyPascalCase}}Font();

  @override
  String get name => '{{fontFamily}}';

  @override
  Map<GoogleFontsVariant, GoogleFontsFile> get files{
    return <GoogleFontsVariant, GoogleFontsFile>{
      {{#fontUrls}}
      const GoogleFontsVariant(fontWeight: FontWeight.w{{variantWeight}}, fontStyle: FontStyle.{{variantStyle}},): const GoogleFontsFile('{{hash}}', {{length}},),
      {{/fontUrls}}
    };
  }
}
{{/method}}
